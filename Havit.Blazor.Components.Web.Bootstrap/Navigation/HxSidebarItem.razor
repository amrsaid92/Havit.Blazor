@namespace Havit.Blazor.Components.Web.Bootstrap
<CascadingValue Value="this" IsFixed="true">
    <div>
        @if (!HasExpandableContent)
        {
			<HxTooltip WrapperCssClass="d-block" Placement="TooltipPlacement.Right" Text="@TooltipText">
				<HxNavLink Href="@Href"
					CssClass="@CssClassHelper.Combine(this.CssClass, "position-relative")"
					Match="this.Match"
					Enabled="this.Enabled">

					@* To hide the nav-content in mobile view *@
					<div data-bs-toggle="collapse" data-bs-target="#@ParentSidebar.NavContentElementId" class="stretched-link">
						<div class="hx-sidebar-item-navlink-content">
							@if (Icon is not null)
							{
								<HxIcon Icon="Icon" />
							}

							<span class="hx-sidebar-item-navlink-content-inner">
								@if (ContentTemplate is not null)
								{
									@ContentTemplate(new(){ ItemExpanded = null })
								}
								@Text
							</span>
						</div>

					</div>
				</HxNavLink>
			</HxTooltip>
        }
        else
        {
                RenderFragment itemNavLinkContent =
                @<div class="hx-sidebar-item-navlink-content">
                    @if (Icon is not null)
                    {
                        <HxIcon Icon="Icon" />
                    }

                    <span class="hx-sidebar-item-navlink-content-inner">
                        @if (ContentTemplate is not null)
                        {
                            @ContentTemplate(new() { ItemExpanded = this.expanded })
                        }
                        @Text
                    </span>

                    <HxIcon Icon="@BootstrapIcon.ChevronRight" CssClass="expand-icon" />
                </div>;

            @if (ParentSidebar.Collapsed)
            {
					<HxNavLink
							Href="@Href"
							CssClass="@CssClassHelper.Combine(this.CssClass, "position-relative")"
							Match="this.Match"
							Enabled="this.Enabled">

							@itemNavLinkContent

							<nav class="nav nav-collapsed flex-column">
								@ChildContent
							</nav>
					</HxNavLink>
            }
            else
            {
                <HxNavLink
                        Href="@Href"
                        CssClass="@CssClassHelper.Combine(this.CssClass)"
                        Match="this.Match"
                        Enabled="this.Enabled"
                        role="button"
                        data-bs-toggle="collapse"
                        data-bs-target="@("#" + id)"
                        aria-expanded="@(this.expanded ? "true" : "false")">

                        @itemNavLinkContent

                </HxNavLink>

                <HxCollapse
                    Id="@id"
                    Parent="@(ParentSidebar.MultipleItemsExpansion ? null : $"#{ParentSidebar.navId}")"
                    @ref="collapseComponent"
                    CssClass="hx-sidebar-subitems"
                    InitiallyExpanded="expanded"
                    OnShown="HandleCollapseShown"
                    OnHidden="HandleCollapseHidden">
                    <nav class="nav flex-column">
                        @ChildContent
                    </nav>
                </HxCollapse>
            }
        }
    </div>
</CascadingValue>